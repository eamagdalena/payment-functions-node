#!groovy
//noinspection GroovyUnusedAssignment
@Library("Infrastructure") _

import uk.gov.hmcts.contino.Environment
import uk.gov.hmcts.contino.Subscription

Environment environment = new Environment(env)
Subscription subscription = new Subscription(env)

def product = "ccpay-functions"
def component = "node"

node {
    env.PATH = "$env.PATH:/usr/local/bin"
    stage('Checkout') {
        deleteDir()
        checkout scm
    }
    stage('Build') {
        yarn("--mutex network install")
    }

    onMaster {
         withSubscription(subscription) {
                withIlbIp(environment) {
                    spinInfra(product, component, environment, false, subscription)
                    scmServiceRegistration(environment.nonProdName)
                }
                stage("Deploy Functions") {
                        def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }
                        def serviceName = "${product}-${component}-${environment}"
                        def result = az "functionapp deployment list-publishing-profiles --name ${serviceName} --resource-group ${serviceName} --query \"[?publishMethod=='MSDeploy'].{publishUrl:publishUrl,userName:userName,userPWD:userPWD}|[0]\""
                        def profile = readJSON text: result
                        def uri = "${profile.userName}:${profile.userPWD}@${profile.publishUrl}"
                        sh "bash uploadSource.sh ${serviceName} functions https://\\${uri}"
                    }
            }

         withSubscription(subscription) {
                withIlbIp(environment) {
                    spinInfra(product, component, environment, false, subscription)
                    scmServiceRegistration(environment.nonProdName)
                }
                stage("Deploy Functions") {
                        def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }
                        def serviceName = "${product}-${component}-${environment}"
                        def result = az "functionapp deployment list-publishing-profiles --name ${serviceName} --resource-group ${serviceName} --query \"[?publishMethod=='MSDeploy'].{publishUrl:publishUrl,userName:userName,userPWD:userPWD}|[0]\""
                        def profile = readJSON text: result
                        def uri = "${profile.userName}:${profile.userPWD}@${profile.publishUrl}"
                        sh "bash uploadSource.sh ${serviceName} functions https://\\${uri}"
                    }
            }

    }

    onDemo {
        withSubscription(subscription) {
               withIlbIp(environment) {
                   spinInfra(product, component, environment, false, subscription)
                   scmServiceRegistration(environment.nonProdName)
               }
               stage("Deploy Functions") {
                       def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }
                       def serviceName = "${product}-${component}-${environment}"
                       def result = az "functionapp deployment list-publishing-profiles --name ${serviceName} --resource-group ${serviceName} --query \"[?publishMethod=='MSDeploy'].{publishUrl:publishUrl,userName:userName,userPWD:userPWD}|[0]\""
                       def profile = readJSON text: result
                       def uri = "${profile.userName}:${profile.userPWD}@${profile.publishUrl}"
                       sh "bash uploadSource.sh ${serviceName} functions https://\\${uri}"
                   }
           }
    }
}

def deployStage(product, component, environment, subscription) {
    stage("Deploy Functions") {
        def az = { cmd -> return sh(script: "env AZURE_CONFIG_DIR=/opt/jenkins/.azure-$subscription az $cmd", returnStdout: true).trim() }
        def serviceName = "${product}-${component}-${environment}"
        def result = az "functionapp deployment list-publishing-profiles --name ${serviceName} --resource-group ${serviceName} --query \"[?publishMethod=='MSDeploy'].{publishUrl:publishUrl,userName:userName,userPWD:userPWD}|[0]\""
        def profile = readJSON text: result
        def uri = "${profile.userName}:${profile.userPWD}@${profile.publishUrl}"
        sh "bash uploadSource.sh ${serviceName} functions https://\\${uri}"
    }
}

def yarn(task) {
    sh "cd functions"
    sh("yarn ${task}")
    sh "cd .."
}
